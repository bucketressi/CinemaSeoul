<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.uos.cinemaseoul.dao.product.ProductPayDao">

    <!--[상품 결제하기]-->
    <insert id="insertProductPay" parameterType="ProductPayVo">
        <selectKey keyProperty="prod_pay_id" resultType="int" order="BEFORE">
            SELECT SEQ_PAY.nextval FROM DUAL
        </selectKey>

        INSERT INTO PRODUCTPAY (PROD_PAY_ID, USER_ID, USE_POINT, PRICE, PAY_TYPE_CODE, ACCU_POINT, USE_CODE)
        VALUES (#{prod_pay_id},#{user_id},#{use_point},#{price},#{pay_type_code},#{accu_point},#{use_code})
    </insert>

    <!--상품 세부정보 저장-->
    <update id="insertProductPayInfo" parameterType="ProductPayInfoVo">
        INSERT INTO PRODUCTPAYINFO (PROD_PAY_INFO_ID, PROD_PAY_ID, PROD_ID, PROD_NAME, AMOUNT, PRICE)
        SELECT SEQ_PRODUCTPAYINFO.nextval, A.* FROM (
        <foreach collection="products" item="prod" index="index" separator="UNION ALL ">
            SELECT ${prod.prod_pay_id} AS PROD_PAY_ID, ${prod.prod_id} AS PROD_ID,
                   (SELECT PROD_NAME FROM PRODUCT WHERE PROD_ID = ${prod.prod_id}) AS PROD_NAME,
                                                 ${prod.amount} AS AMOUNT, ${prod.price} AS PRICE FROM DUAL
        </foreach>)A
    </update>

    <!--상품 수량 업데이트-->
    <update id="updateProductLimit">
        UPDATE PRODUCT SET LIMIT = LIMIT - #{amount}
        WHERE PROD_ID =#{prod_id}
    </update>
    <!--상품 수량 체크 (음수면 rollback)-->
    <select id="getProductLimit" resultType="Integer" parameterType="Integer">
        SELECT LIMIT FROM PRODUCT WHERE PROD_ID = #{prod_id}
    </select>


    <!--[상품결제 취소]-->
    <!--포인트 원복용-->
    <select id="getCancelInfo" resultType="ProductPayVo">
        SELECT PROD_PAY_ID, USER_ID, ACCU_POINT, PAY_STATE_CODE, USE_POINT FROM PRODUCTPAY
        WHERE PROD_PAY_ID  = #{prod_pay_id}
    </select>
    <!--결제상태취소-->
    <update id="setCancel">
        UPDATE PRODUCTPAY SET PAY_STATE_CODE = #{pay_state_cancel}
        WHERE PROD_PAY_ID = #{prod_pay_id}
    </update>
    <!--결제 상품 확인-->
    <select id="getProductPayInfo" resultType="ProductPayInfoVo">
        SELECT PROD_ID, AMOUNT FROM PRODUCTPAYINFO
        WHERE PROD_PAY_ID = #{prod_pay_id}
    </select>
    <!--상품 수량 원복-->
    <update id="updateProductLimitBack">
        UPDATE PRODUCT SET LIMIT = LIMIT + #{amount}
        WHERE PROD_ID =#{prod_id}
    </update>


    <!--[코드 사용]-->
    <select id="selectProductPay" resultType="ProductPayVo">
        SELECT PROD_PAY_ID, USE_CODE, USE_DATETIME, PAY_STATE_CODE FROM PRODUCTPAY
        WHERE USE_CODE = #{use_code}
    </select>
    <update id="useCode" parameterType="String">
        UPDATE PRODUCTPAY SET PAY_STATE_CODE = #{pay_state_fin},
                              USE_DATETIME = SYSDATE
        WHERE USE_CODE = #{use_code}
    </update>

    <!--[결제 조회]-->
    <select id="countList" parameterType="PayListCriteria" resultType="Integer">
        SELECT COUNT(PROD_PAY_ID) FROM PRODUCTPAY P
        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="user_id != null">
                AND P.USER_ID = #{user_id}
            </if>

            <if test="start_date != null"><![CDATA[
                AND TO_CHAR(P.PAY_DATETIME, 'YYYYMMDD') >= #{start_date}
            ]]></if>

            <if test="end_date != null"><![CDATA[
                AND TO_CHAR(P.PAY_DATETIME, 'YYYYMMDD') <= #{end_date}
            ]]></if>
        </trim>
    </select>

    <select id="selectProductPayList" parameterType="PayListCriteria" resultType="ProductPayInfoDto">
        SELECT
            B.PROD_PAY_ID, B.USER_ID, B.USE_POINT, B.PRICE, B.ACCU_POINT,
            B.PAY_TYPE, B.PAY_STATE_CODE, B.PAY_DATETIME,
            B.USE_DATETIME, B.USE_CODE
        FROM (
        SELECT /*+index_desc(IDX_BOOK_PK)*/ ROWNUM AS RNUM,
        A.PROD_PAY_ID, A.USER_ID, A.USE_POINT, A.PRICE, A.ACCU_POINT,
        A.PAY_STATE_CODE, A.PAY_TYPE, A.PAY_DATETIME,
        A.USE_DATETIME, A.USE_CODE

        FROM(
        SELECT
            P.PROD_PAY_ID, P.USER_ID, P.USE_POINT, P.PRICE, P.ACCU_POINT,
            P.PAY_STATE_CODE, C2.CODE_NAME AS PAY_TYPE, P.PAY_DATETIME,
            P.USE_DATETIME, P.USE_CODE
            FROM PRODUCTPAY P
            inner join CODE C2 on C2.CODE_ID = P.PAY_TYPE_CODE

        <trim prefix="WHERE" prefixOverrides="AND">
            <if test="user_id != null">
                AND P.USER_ID = #{user_id}
            </if>

            <if test="start_date != null"><![CDATA[
                AND TO_CHAR(P.PAY_DATETIME, 'YYYYMMDD') >= #{start_date}
            ]]></if>

            <if test="end_date != null"><![CDATA[
                AND TO_CHAR(P.PAY_DATETIME, 'YYYYMMDD') <= #{end_date}
            ]]></if>
        </trim>

        ORDER BY P.PROD_PAY_ID
        ) A
        <![CDATA[ WHERE ROWNUM  <= #{page}*#{amount}) B
        WHERE B.RNUM > (#{page}-1)*#{amount} ]]>
    </select>

    <select id="selectProductPayInfo" resultType="ProductInfoShortDto">
        SELECT PROD_ID, PROD_NAME, PRICE, AMOUNT FROM PRODUCTPAYINFO
        WHERE PROD_PAY_ID = #{prod_pay_id}
    </select>


</mapper>